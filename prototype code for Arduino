#include <SPI.h>
int index =0;
int ESP32_to_Arduino_transaction_flag =0;// 
int Arduino_to_ESP32_transaction_flag =0;
int handshake_input=2;
int handshake_output=7;
bool flag = false;

volatile bool haveData = false;

typedef struct SPI_STRUCT{
  
  
  

  
  byte D_register1;
  byte B_register1;
  byte D_register2;
  byte B_register2;
  
};
SPI_STRUCT struct1;

void setup(void) {
  Serial.begin(115200);
  DDRD = DDRD | B11111110;  // confiure pins D0,D2-D7 as outputs
                          // without changing the value of pins 0 & 1, which are RX & TX
  
  DDRB = DDRB | B11111100;  // confiure pins D8-D13 as outputs
                          // without changing the value of bits 6 & 7 of the register ( crystal osc. pins) which are unusable.
  
  
  
  PORTD=B00000000; // set pins D2-D7 to LOW
    //this should read as: 1 ie 00000001
  PORTB=B00000000; // set pins D8-D13 to LOW
    //this should read as: 0 ie 00000000
  
  struct1.D_register2 = PIND;
  //struct1.D_register = 0x0E;
  struct1.B_register2 = PINB;
  //struct1.B_register = 0x02;
  PORTD=B11111000; // set pins D2-D7 to HIGH , no control on D1:D0 which default are b'01
  //this should read as: 11111101
  PORTB=B00111111; // set pins D8-D13 to HIGH , 
    // this should read as: 00111111
  struct1.D_register1 = PIND;
  //struct1.D_register = 0x0E;
  struct1.B_register1 = PINB;
  //struct1.B_register = 0x02;
  
  pinMode(handshake_input,INPUT_PULLUP); //input pin (D2)for ESP32 to control transfer of data from Arduino
  pinMode(handshake_output,OUTPUT); //output pin (D7)for Arduino to interrupt ESP32
  
}


void loop() {
  // put your main code here, to run repeatedly:
  
  ESP32_to_Arduino_transaction_flag=digitalRead(handshake_input);
  //Serial.println(ESP32_to_Arduino_transaction_flag);

  

  Arduino_to_ESP32_transaction_flag=digitalRead(handshake_output);
  //Serial.println(Arduino_to_ESP32_transaction_flag);
  
  SPI.begin();
  digitalWrite(SS, HIGH); // disable Slave Select
  SPI.setClockDivider(SPI_CLOCK_DIV2);//divide the clock by 2 = 8MHz
  
  // Serial.print("B_register1: ");
  // Serial.println(struct1.B_register1,BIN);
  // Serial.print("D_register1: ");
  // Serial.println(struct1.D_register1,BIN);
  // Serial.print("B_register2: ");
  // Serial.println(struct1.B_register2,BIN);
  // Serial.print("D_register2: ");
  // Serial.println(struct1.D_register2,BIN);
  //Serial.print("ESP32_to_Arduino_transaction_flag: ");
  //Serial.println(ESP32_to_Arduino_transaction_flag);
  
  // Serial.print("Arduino_to_ESP32_transaction_flag: ");
  // Serial.println(Arduino_to_ESP32_transaction_flag);
  //&& handshake_output ==1
  haveData = true;
  if (haveData){
    if(ESP32_to_Arduino_transaction_flag==0  ){
      digitalWrite(SS, LOW);
       
      SPI.transfer(struct1.B_register1);
      
      SPI.transfer(struct1.D_register1);
      SPI.transfer(struct1.B_register2);
      
      SPI.transfer(struct1.D_register2);
      

      digitalWrite(SS, HIGH);
      delayMicroseconds(1);
      Serial.print("B_register1: ");
      Serial.println(struct1.B_register1,HEX);
      Serial.print("D_register1: ");
      Serial.println(struct1.D_register1,HEX);
      Serial.print("B_register2: ");
      Serial.println(struct1.B_register2,HEX);
      Serial.print("D_register2: ");
      Serial.println(struct1.D_register2,HEX);
      Serial.println("test");
      Serial.print("Arduino_to_ESP32_transaction_flag: ");
      Serial.println(handshake_output);
      handshake_output = 0;
      Serial.print("ESP32_to_Arduino_transaction_flag: ");
      Serial.println(ESP32_to_Arduino_transaction_flag);
  
      Serial.print("Arduino_to_ESP32_transaction_flag: ");
      Serial.println(handshake_output);
    }  
  }
  haveData = false;

  
  }

