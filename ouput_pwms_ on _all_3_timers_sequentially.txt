#include <avr/interrupt.h>

#define PIN_PWM_T0 5   // Timer0 Output Pin (OC0B)
#define PIN_PWM_T1 9   // Timer1 Output Pin (OC1A)
#define PIN_PWM_T2 3   // Timer2 Output Pin (OC2B)
#define handshake_input 7  // Trigger input pin

// Define PWM states
enum PWM_State { PWM_30HZ, OFF_1, PWM_1KHZ, OFF_2, NEXT_TIMER, DONE };
volatile PWM_State state = PWM_30HZ;

volatile uint16_t count = 0;
volatile bool cycle_complete = false;
bool pwm_started = false;
volatile uint8_t step = 0;  // Track current step (0=T0, 1=T1, 2=T2)

void setup() {
  pinMode(PIN_PWM_T0, OUTPUT);
  pinMode(PIN_PWM_T1, OUTPUT);
  pinMode(PIN_PWM_T2, OUTPUT);
  pinMode(handshake_input, INPUT);

  digitalWrite(PIN_PWM_T0, LOW);
  digitalWrite(PIN_PWM_T1, LOW);
  digitalWrite(PIN_PWM_T2, LOW);

  cli();  
  configureTimer0();  
  configureTimer1();  
  configureTimer2();  
  sei();  
}

void configureTimer0() {
  TCCR0A = 0;
  TCCR0B = 0;
  TIMSK0 &= ~(1 << OCIE0A);
}

void configureTimer1() {
  TCCR1A = 0;
  TCCR1B = 0;
  TIMSK1 &= ~(1 << OCIE1A);
}

void configureTimer2() {
  TCCR2A = 0;
  TCCR2B = 0;
  TIMSK2 &= ~(1 << OCIE2A);
}

// === TIMER 0 ===
void startPWM_30Hz_T0() {
  state = PWM_30HZ; // Reset state machine
  count = 0;
  OCR0A = 255;  
  TCCR0A = (1 << COM0B0) | (1 << WGM01);
  TCCR0B = (1 << CS02) | (1 << CS00);
  TIMSK0 |= (1 << OCIE0A);
}

void startPWM_1kHz_T0() {
  OCR0A = 124;  
  TCCR0A = (1 << COM0B0) | (1 << WGM01);
  TCCR0B = (1 << CS01) | (1 << CS00);
}

void stopPWM_T0() {
  TCCR0A &= ~(1 << COM0B0);
}

// === TIMER 1 ===
void startPWM_30Hz_T1() {
  state = PWM_30HZ; // Reset state
  count = 0;
  OCR1A = 255;
  TCCR1A = (1 << COM1A0);
  TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
  TIMSK1 |= (1 << OCIE1A);
}

void startPWM_1kHz_T1() {
  OCR1A = 124;
  TCCR1A = (1 << COM1A0);
  TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
}

void stopPWM_T1() {
  TCCR1A &= ~(1 << COM1A0);
}

// === TIMER 2 ===
void startPWM_30Hz_T2() {
  state = PWM_30HZ; // Reset state
  count = 0;
  OCR2A = 255;
  TCCR2A = (1 << COM2B0) | (1 << WGM21);
  TCCR2B = (1 << CS22) | (1 << CS21) | (1 << CS20);
  TIMSK2 |= (1 << OCIE2A);
}

void startPWM_1kHz_T2() {
  OCR2A = 124;
  TCCR2A = (1 << COM2B0) | (1 << WGM21);
  TCCR2B = (1 << CS22);
}

void stopPWM_T2() {
  TCCR2A &= ~(1 << COM2B0);
}

// === INTERRUPTS ===
ISR(TIMER0_COMPA_vect) {
  count++;
  switch (state) {
    case PWM_30HZ:
      if (count >= 100) {
        stopPWM_T0();
        state = OFF_1;
        count = 0;
      }
      break;

    case OFF_1:
      if (count >= 50) {
        startPWM_1kHz_T0();
        state = PWM_1KHZ;
        count = 0;
      }
      break;

    case PWM_1KHZ:
      if (count >= 1000) {
        stopPWM_T0();
        state = OFF_2;
        count = 0;
      }
      break;

    case OFF_2:
      if (count >= 50) {
        stopPWM_T0();
        state = NEXT_TIMER;
        count = 0;
      }
      break;

    case NEXT_TIMER:
      TIMSK0 &= ~(1 << OCIE0A);
      startPWM_30Hz_T1();
      break;
  }
}

ISR(TIMER1_COMPA_vect) {
  count++;
  switch (state) {
    case PWM_30HZ:
      if (count >= 100) {
        stopPWM_T1();
        state = OFF_1;
        count = 0;
      }
      break;

    case OFF_1:
      if (count >= 50) {
        startPWM_1kHz_T1();
        state = PWM_1KHZ;
        count = 0;
      }
      break;

    case PWM_1KHZ:
      if (count >= 1000) {
        stopPWM_T1();
        state = OFF_2;
        count = 0;
      }
      break;

    case OFF_2:
      if (count >= 50) {
        stopPWM_T1();
        state = NEXT_TIMER;
        count = 0;
      }
      break;

    case NEXT_TIMER:
      TIMSK1 &= ~(1 << OCIE1A);
      startPWM_30Hz_T2();
      break;
  }
}

ISR(TIMER2_COMPA_vect) {
  count++;
  switch (state) {
    case PWM_30HZ:
      if (count >= 100) {
        stopPWM_T2();
        state = OFF_1;
        count = 0;
      }
      break;

    case OFF_1:
      if (count >= 50) {
        startPWM_1kHz_T2();
        state = PWM_1KHZ;
        count = 0;
      }
      break;

    case PWM_1KHZ:
      if (count >= 1000) {
        stopPWM_T2();
        state = OFF_2;
        count = 0;
      }
      break;

    case OFF_2:
      if (count >= 50) {
        stopPWM_T2();
        state = DONE;
        cycle_complete = true;
      }
      break;
  }
}

void loop() {
  if (!pwm_started && digitalRead(handshake_input) == HIGH) {
    pwm_started = true;
    startPWM_30Hz_T0();
  }
}